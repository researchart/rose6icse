% Copyright Claudio Menghi, University of Luxembourg, 2018-2019, claudio.menghi@uni.luÂ  
function dblBallaniminit
%DBLBALLANIMINIT Initializes a figure for sldemo_doublebounce animations.

% Copyright 1990-2013 The MathWorks, Inc.

% Query for UserData
handles = get_param([bdroot,'/Animation'],'UserData');

% Only create figure if it does not exist already. This moves some logic
% out of the model/block backs
if isempty(handles) || ~isfield(handles,'figure') || ~ishghandle(handles.figure,'figure')

    % Set the model name
    handles.model = bdroot(gcs);

    % Initialize the whole figure
    position = get(0,'DefaultFigurePosition');
    position(3:4) = [600 500];

    % Create figure
    handles.figure = figure( ...
        'Name','Double Bouncing Ball Animation', ...
        'NumberTitle','off', ...
        'BackingStore','off', ...
        'Position',position, ...
        'MenuBar', 'none', ...
        'Color', [0.6 0.6 0.6]);

    % Create axes in figure
    handles.axes = axes( ...
        'Units','normalized', ...
        'Position',[0.05 0.1 0.70 0.8], ...
        'Visible','on', ...
        'Color', [1 1 1], ...
        'XTick',[], ...
        'XLim',[0 50], ...
        'YLim',[0 70]);
    
    set(handles.axes,'SortMethod','childorder');
    
    set(handles.axes,'Title',...
        text('String','Passing Zeno: Double Bouncing Ball','Color','black'));
    hold(handles.axes,'on');
    cla(handles.axes);

    % x position of the objects
    xb1= 15;
    xg1 = 10; xg2 = 20;
    xb2= 35;
    xg3 = 30; xg4 = 40;

    % initial y position of the objects
    startYPosition = 30;

    % Create Ball 1 in axes
    handles.ball1 = plot(handles.axes,...
        xb1, startYPosition,...
        'o',...
        'MarkerSize',10,...
        'MarkerFaceColor','green',...
        'MarkerEdgeColor', 'green' );

    % Create Ball 2 in axes
    handles.ball2 = plot(handles.axes,...
        xb2, startYPosition,...
        'o',...
        'MarkerSize',10,...
        'MarkerFaceColor','red',...
        'MarkerEdgeColor', 'red' );

    % Create ground lines
    lineOffset = 1;

    % Create ground line 1
    handles.ground1 = line([xg1 xg2], [startYPosition startYPosition] - lineOffset,'LineWidth',4);

    % Create ground line 2
    handles.ground2 = line([xg3 xg4], [startYPosition startYPosition] - lineOffset,'LineWidth',4);

    % Create annotation for ground level 1 change
    handles.annotation1 = annotation(handles.figure,...
        'textbox',[.25 .7 .275 .059],...
        'String','Ground 1 level changed.',...
        'FitBoxToText','on',...
        'LineStyle','none',...
        'Position',[0.15 0.5 .27 .054],...
        'Color','black',...
        'Visible','off');

    % Create annotation for ground level 2 change
    handles.annotation2 = annotation(handles.figure,...
        'textbox',[.25 .7 .275 .059],...
        'String','Ground 2 level changed.',...
        'FitBoxToText','on',...
        'LineStyle','none',...
        'Position',[0.43 0.5 .27 .054],...
        'Color','black',...
        'Visible','off');

    % Create annotation for status
    handles.status = annotation(handles.figure,...
        'textbox',[.22 .7 .5 .059],...
        'String',sprintf('Choose an algorithm... \n(Default is adaptive)'),...
        'FitBoxToText','on',...
        'LineStyle','none',...
        'Position',[0.22 0.8 .5 .054],...
        'Color','black',...
        'Visible','on',...
        'FontSize',12);

    % Create annotation for error
    handles.error = annotation(handles.figure,...
        'textbox',[.22 .7 .5 .059],...
        'String','Simulation Error',...
        'FitBoxToText','on',...
        'LineStyle','none',...
        'Position',[0.3 0.6 .5 .054],...
        'Color','red',...
        'Visible','off',...
        'FontSize',12);

    % Create Buttons
    btnBottom = 0.15;
    btnLeft   = 0.80;
    btnWid    = 0.17;
    btnHt     = 0.10;

    % Stop Simulation button
    handles.stop = uicontrol( ...
        'Style','pushbutton', ...
        'Units','normalized', ...
        'Position',[btnLeft btnBottom btnWid btnHt], ...
        'Callback','set_param(bdroot,''SimulationCommand'',''Stop'')', ...
        'String','Stop');

    % Adaptive button
    handles.adaptive = uicontrol( ...
        'Style','pushbutton', ...
        'Units','normalized', ...
        'Position',[btnLeft btnBottom+0.2 btnWid btnHt], ...
        'String','Adaptive', ...
        'Callback','simdblBall(''Adaptive'');');

    % Nonadaptive button
    handles.nonadaptive = uicontrol( ...
        'Style','pushbutton', ...
        'Units','normalized', ...
        'Position',[btnLeft btnBottom+0.3 btnWid btnHt], ...
        'String','Nonadaptive', ...
        'Callback','simdblBall(''Nonadaptive'');');

    % Store handle data on top level Animation block
    set_param([bdroot,'/Animation'],'UserData',handles);
end
